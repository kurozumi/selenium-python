# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, Baiju Muthukadan
# This file is distributed under the same license as the Selenium Python
# Bindings package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Selenium Python Bindings 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-28 14:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/navigating.rst:4
msgid "Navigating"
msgstr ""

#: ../../source/navigating.rst:6
msgid ""
"The first thing you'll want to do with WebDriver is navigate to a link.  "
"The normal way to do this is by calling ``get`` method:"
msgstr ""

#: ../../source/navigating.rst:13
msgid ""
"WebDriver will wait until the page has fully loaded (that is, the "
"``onload`` event has fired) before returning control to your test or "
"script.  It's worth noting that if your page uses a lot of AJAX on load "
"then WebDriver may not know when it has completely loaded.  If you need "
"to ensure such pages are fully loaded then you can use :ref:`waits "
"<waits>`."
msgstr ""

#: ../../source/navigating.rst:21
msgid "Interacting with the page"
msgstr ""

#: ../../source/navigating.rst:23
msgid ""
"Just being able to go to places isn't terribly useful.  What we'd really "
"like to do is to interact with the pages, or, more specifically, the HTML"
" elements within a page.  First of all, we need to find one.  WebDriver "
"offers a number of ways to find elements.  For example, given an element "
"defined as::"
msgstr ""

#: ../../source/navigating.rst:31
msgid "you could find it using any of::"
msgstr ""

#: ../../source/navigating.rst:37
msgid ""
"You can also look for a link by its text, but be careful! The text must "
"be an exact match! You should also be careful when using `XPATH in "
"WebDriver`.  If there's more than one element that matches the query, "
"then only the first will be returned.  If nothing can be found, a "
"``NoSuchElementException`` will be raised."
msgstr ""

#: ../../source/navigating.rst:45
msgid ""
"WebDriver has an \"Object-based\" API; we represent all types of elements"
" using the same interface.  This means that although you may see a lot of"
" possible methods you could invoke when you hit your IDE's auto-complete "
"key combination, not all of them will make sense or be valid.  Don't "
"worry! WebDriver will attempt to do the Right Thing, and if you call a "
"method that makes no sense (\"setSelected()\" on a \"meta\" tag, for "
"example) an exception will be raised."
msgstr ""

#: ../../source/navigating.rst:53
msgid ""
"So, you've got an element.  What can you do with it? First of all, you "
"may want to enter some text into a text field::"
msgstr ""

#: ../../source/navigating.rst:58
msgid "You can simulate pressing the arrow keys by using the \"Keys\" class::"
msgstr ""

#: ../../source/navigating.rst:62
msgid ""
"It is possible to call `send_keys` on any element, which makes it "
"possible to test keyboard shortcuts such as those used on GMail.  A side-"
"effect of this is that typing something into a text field won't "
"automatically clear it.  Instead, what you type will be appended to "
"what's already there.  You can easily clear the contents of a text field "
"or textarea with `clear` method::"
msgstr ""

#: ../../source/navigating.rst:73
msgid "Filling in forms"
msgstr ""

#: ../../source/navigating.rst:75
msgid ""
"We've already seen how to enter text into a textarea or text field, but "
"what about the other elements? You can \"toggle\" the state of drop down,"
" and you can use \"setSelected\" to set something like an `OPTION` tag "
"selected.  Dealing with `SELECT` tags isn't too bad::"
msgstr ""

#: ../../source/navigating.rst:86
msgid ""
"This will find the first \"SELECT\" element on the page, and cycle "
"through each of it's OPTIONs in turn, printing out their values, and "
"selecting each in turn."
msgstr ""

#: ../../source/navigating.rst:90
msgid ""
"As you can see, this isn't the most efficient way of dealing with SELECT "
"elements . WebDriver's support classes include one called \"Select\", "
"which provides useful methods for interacting with these::"
msgstr ""

#: ../../source/navigating.rst:102
msgid ""
"WebDriver also provides features for deselecting all the selected "
"options::"
msgstr ""

#: ../../source/navigating.rst:107
msgid "This will deselect all OPTIONs from the first SELECT on the page."
msgstr ""

#: ../../source/navigating.rst:109
msgid ""
"Suppose in a test, we need the list of all default selected options, "
"Select class provides a property method that returns a list::"
msgstr ""

#: ../../source/navigating.rst:115
msgid "To get all available options::"
msgstr ""

#: ../../source/navigating.rst:119
msgid ""
"Once you've finished filling out the form, you probably want to submit "
"it. One way to do this would be to find the \"submit\" button and click "
"it::"
msgstr ""

#: ../../source/navigating.rst:126
msgid ""
"Alternatively, WebDriver has the convenience method \"submit\" on every "
"element.  If you call this on an element within a form, WebDriver will "
"walk up the DOM until it finds the enclosing form and then calls submit "
"on that.  If the element isn't in a form, then the "
"``NoSuchElementException`` will be raised::"
msgstr ""

#: ../../source/navigating.rst:136
msgid "Drag and drop"
msgstr ""

#: ../../source/navigating.rst:138
msgid ""
"You can use drag and drop, either moving an element by a certain amount, "
"or on to another element::"
msgstr ""

#: ../../source/navigating.rst:149
msgid "Moving between windows and frames"
msgstr ""

#: ../../source/navigating.rst:151
msgid ""
"It's rare for a modern web application not to have any frames or to be "
"constrained to a single window.  WebDriver supports moving between named "
"windows using the \"switch_to_window\" method::"
msgstr ""

#: ../../source/navigating.rst:157
msgid ""
"All calls to ``driver`` will now be interpreted as being directed to the "
"particular window.  But how do you know the window's name? Take a look at"
" the javascript or link that opened it::"
msgstr ""

#: ../../source/navigating.rst:163
msgid ""
"Alternatively, you can pass a \"window handle\" to the "
"\"switch_to_window()\" method.  Knowing this, it's possible to iterate "
"over every open window like so::"
msgstr ""

#: ../../source/navigating.rst:170
msgid "You can also swing from frame to frame (or into iframes)::"
msgstr ""

#: ../../source/navigating.rst:174
msgid ""
"It's possible to access subframes by separating the path with a dot, and "
"you can specify the frame by its index too.  That is::"
msgstr ""

#: ../../source/navigating.rst:179
msgid ""
"would go to the frame named \"child\" of the first subframe of the frame "
"called \"frameName\".  **All frames are evaluated as if from *top*.**"
msgstr ""

#: ../../source/navigating.rst:182
msgid ""
"Once we are done with working on frames, we will have to come back to the"
" parent frame which can be done using::"
msgstr ""

#: ../../source/navigating.rst:188
msgid "Popup dialogs"
msgstr ""

#: ../../source/navigating.rst:190
msgid ""
"Selenium WebDriver has built-in support for handling popup dialog boxes."
"  After you've triggerd action that would open a popup, you can access "
"the alert with the following::"
msgstr ""

#: ../../source/navigating.rst:196
msgid ""
"This will return the currently open alert object.  With this object you "
"can now accept, dismiss, read its contents or even type into a prompt.  "
"This interface works equally well on alerts, confirms, prompts.  Refer to"
" the API documentation for more information."
msgstr ""

#: ../../source/navigating.rst:203
msgid "Navigation: history and location"
msgstr ""

#: ../../source/navigating.rst:205
msgid ""
"Earlier, we covered navigating to a page using the \"get\" command ( "
"``driver.get(\"http://www.example.com\")``) As you've seen, WebDriver has"
" a number of smaller, task-focused interfaces, and navigation is a useful"
" task.  To navigate to a page, you can use `get` method::"
msgstr ""

#: ../../source/navigating.rst:212
msgid "To move backwards and forwards in your browser's history::"
msgstr ""

#: ../../source/navigating.rst:217
msgid ""
"Please be aware that this functionality depends entirely on the "
"underlying driver.  It's just possible that something unexpected may "
"happen when you call these methods if you're used to the behaviour of one"
" browser over another."
msgstr ""

#: ../../source/navigating.rst:224
msgid "Cookies"
msgstr ""

#: ../../source/navigating.rst:226
msgid ""
"Before we leave these next steps, you may be interested in understanding "
"how to use cookies.  First of all, you need to be on the domain that the "
"cookie will be valid for:"
msgstr ""

