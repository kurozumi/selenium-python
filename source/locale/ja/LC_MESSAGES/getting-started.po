# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, Baiju Muthukadan
# This file is distributed under the same license as the Selenium Python
# Bindings package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Selenium Python Bindings 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-28 14:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/getting-started.rst:4
msgid "Getting Started"
msgstr ""

#: ../../source/getting-started.rst:7
msgid "Simple Usage"
msgstr ""

#: ../../source/getting-started.rst:9
msgid ""
"If you have installed Selenium Python bindings, you can start using it "
"from Python like this."
msgstr ""

#: ../../source/getting-started.rst:27
msgid ""
"The above script can be saved into a file (eg:- `python_org_search.py`), "
"then it can be run like this::"
msgstr ""

#: ../../source/getting-started.rst:32
msgid ""
"The `python` which you are running should have the `selenium` module "
"installed."
msgstr ""

#: ../../source/getting-started.rst:36
msgid "Example Explained"
msgstr ""

#: ../../source/getting-started.rst:38
msgid ""
"The `selenium.webdriver` module provides all the WebDriver "
"implementations.  Currently supported WebDriver implementations are "
"Firefox, Chrome, IE and Remote.  The `Keys` class provide keys in the "
"keyboard like RETURN, F1, ALT etc."
msgstr ""

#: ../../source/getting-started.rst:48
msgid "Next, the instance of Firefox WebDriver is created."
msgstr ""

#: ../../source/getting-started.rst:54 ../../source/getting-started.rst:191
msgid ""
"The `driver.get` method will navigate to a page given by the URL. "
"WebDriver will wait until the page has fully loaded (that is, the "
"\"onload\" event has fired) before returning control to your test or "
"script.  It's worth noting that if your page uses a lot of AJAX on load "
"then WebDriver may not know when it has completely loaded.::"
msgstr ""

#: ../../source/getting-started.rst:62 ../../source/getting-started.rst:199
msgid ""
"The next line is an assertion to confirm that title has \"Python\" word "
"in it::"
msgstr ""

#: ../../source/getting-started.rst:67 ../../source/getting-started.rst:205
msgid ""
"WebDriver offers a number of ways to find elements using one of the "
"`find_element_by_*` methods.  For example, the input text element can be "
"located by its `name` attribute using `find_element_by_name` method.  "
"Detailed explanation of finding elements is available in the :ref"
":`locating-elements` chapter::"
msgstr ""

#: ../../source/getting-started.rst:75
msgid ""
"Next we are sending keys, this is similar to entering keys using your "
"keyboard.  Special keys can be send using `Keys` class imported from "
"`selenium.webdriver.common.keys`.  To be safe, we'll first clear any "
"prepopulated text in the input field (e.g. \"Search\") so it doesn't "
"affect our search results::"
msgstr ""

#: ../../source/getting-started.rst:85
msgid ""
"After submission of the page, you should get the result if there is any. "
"To ensure that some results are found, make an assertion::"
msgstr ""

#: ../../source/getting-started.rst:90
msgid ""
"Finally, the browser window is closed.  You can also call `quit` method "
"instead of `close`.  The `quit` will exit entire browser whereas close` "
"will close one tab, but if just one tab was open, by default most browser"
" will exit entirely.::"
msgstr ""

#: ../../source/getting-started.rst:99
msgid "Using Selenium to write tests"
msgstr ""

#: ../../source/getting-started.rst:101
msgid ""
"Selenium is mostly used for writing test cases.  The `selenium` package "
"itself doesn't provide a testing tool/framework.  You can write test "
"cases using Python's unittest module.  The other options for a "
"tool/framework are py.test and nose."
msgstr ""

#: ../../source/getting-started.rst:106
msgid ""
"In this chapter, we use `unittest` as the framework of choice.  Here is "
"the modified example which uses unittest module.  This is a test for "
"`python.org` search functionality::"
msgstr ""

#: ../../source/getting-started.rst:136
msgid "You can run the above test case from a shell like this::"
msgstr ""

#: ../../source/getting-started.rst:145
msgid "The above result shows that the test has been successfully completed."
msgstr ""

#: ../../source/getting-started.rst:150
msgid "Walk through of the example"
msgstr ""

#: ../../source/getting-started.rst:152
msgid ""
"Initially, all the basic modules required are imported.  The `unittest "
"<http://docs.python.org/library/unittest.html>`_ module is a built-in "
"Python based on Java's JUnit.  This module provides the framework for "
"organizing the test cases.  The `selenium.webdriver` module provides all "
"the WebDriver implementations.  Currently supported WebDriver "
"implementations are Firefox, Chrome, Ie and Remote.  The `Keys` class "
"provide keys in the keyboard like RETURN, F1, ALT etc."
msgstr ""

#: ../../source/getting-started.rst:166
msgid ""
"The test case class is inherited from `unittest.TestCase`. Inheriting "
"from `TestCase` class is the way to tell `unittest` module that this is a"
" test case::"
msgstr ""

#: ../../source/getting-started.rst:173
msgid ""
"The `setUp` is part of initialization, this method will get called before"
" every test function which you are going to write in this test case "
"class.  Here you are creating the instance of Firefox WebDriver."
msgstr ""

#: ../../source/getting-started.rst:182
msgid ""
"This is the test case method. The test case method should always start "
"with characters `test`.  The first line inside this method create a local"
" reference to the driver object created in `setUp` method."
msgstr ""

#: ../../source/getting-started.rst:213
msgid ""
"Next we are sending keys, this is similar to entering keys using your "
"keyboard.  Special keys can be send using `Keys` class imported from "
"`selenium.webdriver.common.keys`::"
msgstr ""

#: ../../source/getting-started.rst:220
msgid ""
"After submission of the page, you should get result as per search if "
"there is any.  To ensure that some results are found, make an assertion::"
msgstr ""

#: ../../source/getting-started.rst:226
msgid ""
"The `tearDown` method will get called after every test method.  This is a"
" place to do all cleanup actions.  In the current method, the browser "
"window is closed.  You can also call `quit` method instead of `close`.  "
"The `quit` will exit the entire browser, whereas `close` will close a "
"tab, but if it is the only tab opened, by default most browser will exit "
"entirely.::"
msgstr ""

#: ../../source/getting-started.rst:236
msgid "Final lines are some boiler plate code to run the test suite::"
msgstr ""

#: ../../source/getting-started.rst:244
msgid "Using Selenium with remote WebDriver"
msgstr ""

#: ../../source/getting-started.rst:246
msgid ""
"To use the remote WebDriver, you should have Selenium server running. To "
"run the server, use this command::"
msgstr ""

#: ../../source/getting-started.rst:251
msgid ""
"While running the Selenium server, you could see a message looking like "
"this::"
msgstr ""

#: ../../source/getting-started.rst:256
msgid ""
"The above line says that you can use this URL for connecting to remote "
"WebDriver.  Here are some examples::"
msgstr ""

#: ../../source/getting-started.rst:274
msgid ""
"The desired capabilities is a dictionary, so instead of using the default"
" dictionaries, you can specify the values explicitly::"
msgstr ""

